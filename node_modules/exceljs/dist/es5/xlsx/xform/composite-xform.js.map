{"version":3,"sources":["../../../../lib/xlsx/xform/composite-xform.js"],"names":["BaseXform","require","CompositeXform","options","tag","attrs","children","map","reduce","child","name","model","forEach","xform","prepare","xmlStream","openNode","render","closeNode","node","parser","parseOpen","text","parseText","parseClose","undefined","module","exports"],"mappings":"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","sourcesContent":["const BaseXform = require('./base-xform');\r\n\r\nclass CompositeXform extends BaseXform {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.tag = options.tag;\r\n    this.attrs = options.attrs;\r\n    this.children = options.children;\r\n    this.map = this.children.reduce((map, child) => {\r\n      const name = child.name || child.tag;\r\n      const tag = child.tag || child.name;\r\n      map[tag] = child;\r\n      child.name = name;\r\n      child.tag = tag;\r\n      return map;\r\n    }, {});\r\n  }\r\n\r\n  prepare(model, options) {\r\n    this.children.forEach(child => {\r\n      child.xform.prepare(model[child.tag], options);\r\n    });\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, this.attrs);\r\n    this.children.forEach(child => {\r\n      child.xform.render(xmlStream, model[child.name]);\r\n    });\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    if (this.parser) {\r\n      this.parser.xform.parseOpen(node);\r\n      return true;\r\n    }\r\n    switch (node.name) {\r\n      case this.tag:\r\n        this.model = {};\r\n        return true;\r\n      default:\r\n        this.parser = this.map[node.name];\r\n        if (this.parser) {\r\n          this.parser.xform.parseOpen(node);\r\n          return true;\r\n        }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.xform.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.xform.parseClose(name)) {\r\n        this.model[this.parser.name] = this.parser.xform.model;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    this.children.forEach(child => {\r\n      child.xform.prepare(model[child.tag], options);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = CompositeXform;\r\n"],"file":"composite-xform.js"}