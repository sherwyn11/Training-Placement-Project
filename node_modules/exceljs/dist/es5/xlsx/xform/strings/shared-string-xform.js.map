{"version":3,"sources":["../../../../../lib/xlsx/xform/strings/shared-string-xform.js"],"names":["TextXform","require","RichTextXform","PhoneticTextXform","BaseXform","SharedStringXform","model","map","r","t","rPh","xmlStream","openNode","tag","hasOwnProperty","richText","forEach","text","render","undefined","closeNode","node","name","parser","parseOpen","parseText","parseClose","rt","push","module","exports"],"mappings":"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","sourcesContent":["const TextXform = require('./text-xform');\r\nconst RichTextXform = require('./rich-text-xform');\r\nconst PhoneticTextXform = require('./phonetic-text-xform');\r\n\r\nconst BaseXform = require('../base-xform');\r\n\r\n// <si>\r\n//   <r></r><r></r>...\r\n// </si>\r\n// <si>\r\n//   <t></t>\r\n// </si>\r\n\r\nclass SharedStringXform extends BaseXform {\r\n  constructor(model) {\r\n    super();\r\n\r\n    this.model = model;\r\n\r\n    this.map = {\r\n      r: new RichTextXform(),\r\n      t: new TextXform(),\r\n      rPh: new PhoneticTextXform(),\r\n    };\r\n  }\r\n\r\n  get tag() {\r\n    return 'si';\r\n  }\r\n\r\n  render(xmlStream, model) {\r\n    xmlStream.openNode(this.tag);\r\n    if (model && model.hasOwnProperty('richText') && model.richText) {\r\n      const {r} = this.map;\r\n      model.richText.forEach(text => {\r\n        r.render(xmlStream, text);\r\n      });\r\n    } else if (model !== undefined && model !== null) {\r\n      this.map.t.render(xmlStream, model);\r\n    }\r\n    xmlStream.closeNode();\r\n  }\r\n\r\n  parseOpen(node) {\r\n    const {name} = node;\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    if (name === this.tag) {\r\n      this.model = {};\r\n      return true;\r\n    }\r\n    this.parser = this.map[name];\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  parseText(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  }\r\n\r\n  parseClose(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        switch (name) {\r\n          case 'r': {\r\n            let rt = this.model.richText;\r\n            if (!rt) {\r\n              rt = this.model.richText = [];\r\n            }\r\n            rt.push(this.parser.model);\r\n            break;\r\n          }\r\n          case 't':\r\n            this.model = this.parser.model;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    switch (name) {\r\n      case this.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = SharedStringXform;\r\n"],"file":"shared-string-xform.js"}