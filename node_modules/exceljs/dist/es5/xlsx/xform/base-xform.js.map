{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["Sax","require","XmlStream","BaseXform","model","map","keys","Object","i","length","reset","obj","assign","parser","stream","Promise","resolve","reject","abort","error","removeAllListeners","on","unpipe","node","parseOpen","text","parseText","name","parseClose","createStream","promise","parse","pipe","xmlStream","render","xml","toXml","module","exports"],"mappings":"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","sourcesContent":["const Sax = require('sax');\r\n\r\nconst XmlStream = require('../../utils/xml-stream');\r\n\r\n/* 'virtual' methods used as a form of documentation */\r\n/* eslint-disable class-methods-use-this */\r\n\r\n// Base class for Xforms\r\nclass BaseXform {\r\n  // constructor(/* model, name */) {}\r\n\r\n  // ============================================================\r\n  // Virtual Interface\r\n  prepare(/* model, options */) {\r\n    // optional preparation (mutation) of model so it is ready for write\r\n  }\r\n\r\n  render(/* xmlStream, model */) {\r\n    // convert model to xml\r\n  }\r\n\r\n  parseOpen(/* node */) {\r\n    // Sax Open Node event\r\n  }\r\n\r\n  parseText(/* node */) {\r\n    // Sax Text event\r\n  }\r\n\r\n  parseClose(/* name */) {\r\n    // Sax Close Node event\r\n  }\r\n\r\n  reconcile(/* model, options */) {\r\n    // optional post-parse step (opposite to prepare)\r\n  }\r\n\r\n  // ============================================================\r\n  reset() {\r\n    // to make sure parses don't bleed to next iteration\r\n    this.model = null;\r\n\r\n    // if we have a map - reset them too\r\n    if (this.map) {\r\n      const keys = Object.keys(this.map);\r\n      for (let i = 0; i < keys.length; i++) {\r\n        this.map[keys[i]].reset();\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeModel(obj) {\r\n    // set obj's props to this.model\r\n    this.model = Object.assign(this.model || {}, obj);\r\n  }\r\n\r\n  parse(parser, stream) {\r\n    return new Promise((resolve, reject) => {\r\n      const abort = error => {\r\n        // Abandon ship! Prevent the parser from consuming any more resources\r\n        parser.removeAllListeners();\r\n        parser.on('error', () => {}); // Ignore any parse errors from the chunk being processed\r\n        stream.unpipe(parser);\r\n        reject(error);\r\n      };\r\n\r\n      parser.on('opentag', node => {\r\n        try {\r\n          this.parseOpen(node);\r\n        } catch (error) {\r\n          abort(error);\r\n        }\r\n      });\r\n      parser.on('text', text => {\r\n        try {\r\n          this.parseText(text);\r\n        } catch (error) {\r\n          abort(error);\r\n        }\r\n      });\r\n      parser.on('closetag', name => {\r\n        try {\r\n          if (!this.parseClose(name)) {\r\n            resolve(this.model);\r\n          }\r\n        } catch (error) {\r\n          abort(error);\r\n        }\r\n      });\r\n      parser.on('end', () => {\r\n        resolve(this.model);\r\n      });\r\n      parser.on('error', error => {\r\n        abort(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  parseStream(stream) {\r\n    const parser = Sax.createStream(true, {});\r\n    const promise = this.parse(parser, stream);\r\n    stream.pipe(parser);\r\n\r\n    return promise;\r\n  }\r\n\r\n  get xml() {\r\n    // convenience function to get the xml of this.model\r\n    // useful for manager types that are built during the prepare phase\r\n    return this.toXml(this.model);\r\n  }\r\n\r\n  toXml(model) {\r\n    const xmlStream = new XmlStream();\r\n    this.render(xmlStream, model);\r\n    return xmlStream.xml;\r\n  }\r\n}\r\n\r\nmodule.exports = BaseXform;\r\n"],"file":"base-xform.js"}