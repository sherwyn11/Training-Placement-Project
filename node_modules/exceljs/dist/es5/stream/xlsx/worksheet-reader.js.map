{"version":3,"sources":["../../../../lib/stream/xlsx/worksheet-reader.js"],"names":["events","require","Sax","_","utils","colCache","Dimensions","Row","Column","WorksheetReader","module","exports","workbook","id","name","_columns","_keys","_dimensions","inherits","EventEmitter","destroy","Error","dimensions","columns","getColumn","c","col","l2n","length","n","push","getColumnKey","key","setColumnKey","value","deleteColumnKey","eachColumnKey","f","each","_emitRow","row","emit","read","entry","options","emitSheet","emitHyperlinks","hyperlinks","worksheets","autodrain","sharedStrings","styles","properties","inCols","inRows","inHyperlinks","cols","current","parser","createStream","on","node","min","parseInt","attributes","max","width","parseFloat","styleId","style","r","ht","height","s","getStyleModel","ref","t","text","v","hyperlink","rId","fromModel","expandRow","address","decodeAddress","cell","getCell","formula","result","xmlDecode","index","sharedString","error","isDateFmt","numFmt","excelToDate","model","date1904","undefined","flowControl","createChild","pipe","sync"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst events = require('events');\r\nconst Sax = require('sax');\r\n\r\nconst _ = require('../../utils/under-dash');\r\nconst utils = require('../../utils/utils');\r\nconst colCache = require('../../utils/col-cache');\r\nconst Dimensions = require('../../doc/range');\r\n\r\nconst Row = require('../../doc/row');\r\nconst Column = require('../../doc/column');\r\n\r\nconst WorksheetReader = (module.exports = function(workbook, id) {\r\n  this.workbook = workbook;\r\n  this.id = id;\r\n\r\n  // and a name\r\n  this.name = `Sheet${this.id}`;\r\n\r\n  // column definitions\r\n  this._columns = null;\r\n  this._keys = {};\r\n\r\n  // keep a record of dimensions\r\n  this._dimensions = new Dimensions();\r\n});\r\n\r\nutils.inherits(WorksheetReader, events.EventEmitter, {\r\n  // destroy - not a valid operation for a streaming writer\r\n  // even though some streamers might be able to, it's a bad idea.\r\n  destroy() {\r\n    throw new Error('Invalid Operation: destroy');\r\n  },\r\n\r\n  // return the current dimensions of the writer\r\n  get dimensions() {\r\n    return this._dimensions;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  },\r\n\r\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\r\n  // are created.\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) {\r\n        return col;\r\n      }\r\n\r\n      // otherise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  },\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  },\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  },\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  },\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  },\r\n\r\n  // =========================================================================\r\n  // Read\r\n\r\n  _emitRow(row) {\r\n    this.emit('row', row);\r\n  },\r\n\r\n  read(entry, options) {\r\n    let emitSheet = false;\r\n    let emitHyperlinks = false;\r\n    let hyperlinks = null;\r\n    switch (options.worksheets) {\r\n      case 'emit':\r\n        emitSheet = true;\r\n        break;\r\n      case 'prep':\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    switch (options.hyperlinks) {\r\n      case 'emit':\r\n        emitHyperlinks = true;\r\n        break;\r\n      case 'cache':\r\n        this.hyperlinks = hyperlinks = {};\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (!emitSheet && !emitHyperlinks && !hyperlinks) {\r\n      entry.autodrain();\r\n      this.emit('finished');\r\n      return;\r\n    }\r\n\r\n    // references\r\n    const { sharedStrings } = this.workbook;\r\n    const { styles } = this.workbook;\r\n    const { properties } = this.workbook;\r\n\r\n    // xml position\r\n    let inCols = false;\r\n    let inRows = false;\r\n    let inHyperlinks = false;\r\n\r\n    // parse state\r\n    let cols = null;\r\n    let row = null;\r\n    let c = null;\r\n    let current = null;\r\n\r\n    const parser = Sax.createStream(true, {});\r\n    parser.on('opentag', node => {\r\n      if (emitSheet) {\r\n        switch (node.name) {\r\n          case 'cols':\r\n            inCols = true;\r\n            cols = [];\r\n            break;\r\n          case 'sheetData':\r\n            inRows = true;\r\n            break;\r\n\r\n          case 'col':\r\n            if (inCols) {\r\n              cols.push({\r\n                min: parseInt(node.attributes.min, 10),\r\n                max: parseInt(node.attributes.max, 10),\r\n                width: parseFloat(node.attributes.width),\r\n                styleId: parseInt(node.attributes.style || '0', 10),\r\n              });\r\n            }\r\n            break;\r\n\r\n          case 'row':\r\n            if (inRows) {\r\n              const r = parseInt(node.attributes.r, 10);\r\n              row = new Row(this, r);\r\n              if (node.attributes.ht) {\r\n                row.height = parseFloat(node.attributes.ht);\r\n              }\r\n              if (node.attributes.s) {\r\n                const styleId = parseInt(node.attributes.s, 10);\r\n                const style = styles.getStyleModel(styleId);\r\n                if (style) {\r\n                  row.style = style;\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 'c':\r\n            if (row) {\r\n              c = {\r\n                ref: node.attributes.r,\r\n                s: parseInt(node.attributes.s, 10),\r\n                t: node.attributes.t,\r\n              };\r\n            }\r\n            break;\r\n          case 'f':\r\n            if (c) {\r\n              current = c.f = { text: '' };\r\n            }\r\n            break;\r\n          case 'v':\r\n            if (c) {\r\n              current = c.v = { text: '' };\r\n            }\r\n            break;\r\n          case 'mergeCell':\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      // =================================================================\r\n      //\r\n      if (emitHyperlinks || hyperlinks) {\r\n        switch (node.name) {\r\n          case 'hyperlinks':\r\n            inHyperlinks = true;\r\n            break;\r\n          case 'hyperlink':\r\n            if (inHyperlinks) {\r\n              const hyperlink = {\r\n                ref: node.attributes.ref,\r\n                rId: node.attributes['r:id'],\r\n              };\r\n              if (emitHyperlinks) {\r\n                this.emit('hyperlink', hyperlink);\r\n              } else {\r\n                hyperlinks[hyperlink.ref] = hyperlink;\r\n              }\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    // only text data is for sheet values\r\n    parser.on('text', text => {\r\n      if (emitSheet) {\r\n        if (current) {\r\n          current.text += text;\r\n        }\r\n      }\r\n    });\r\n\r\n    parser.on('closetag', name => {\r\n      if (emitSheet) {\r\n        switch (name) {\r\n          case 'cols':\r\n            inCols = false;\r\n            this._columns = Column.fromModel(cols);\r\n            break;\r\n          case 'sheetData':\r\n            inRows = false;\r\n            break;\r\n\r\n          case 'row':\r\n            this._dimensions.expandRow(row);\r\n            this._emitRow(row);\r\n            row = null;\r\n            break;\r\n\r\n          case 'c':\r\n            if (row && c) {\r\n              const address = colCache.decodeAddress(c.ref);\r\n              const cell = row.getCell(address.col);\r\n              if (c.s) {\r\n                const style = styles.getStyleModel(c.s);\r\n                if (style) {\r\n                  cell.style = style;\r\n                }\r\n              }\r\n\r\n              if (c.f) {\r\n                const value = {\r\n                  formula: c.f.text,\r\n                };\r\n                if (c.v) {\r\n                  if (c.t === 'str') {\r\n                    value.result = utils.xmlDecode(c.v.text);\r\n                  } else {\r\n                    value.result = parseFloat(c.v.text);\r\n                  }\r\n                }\r\n                cell.value = value;\r\n              } else if (c.v) {\r\n                switch (c.t) {\r\n                  case 's': {\r\n                    const index = parseInt(c.v.text, 10);\r\n                    if (sharedStrings) {\r\n                      cell.value = sharedStrings[index];\r\n                    } else {\r\n                      cell.value = {\r\n                        sharedString: index,\r\n                      };\r\n                    }\r\n                    break;\r\n                  }\r\n\r\n                  case 'str':\r\n                    cell.value = utils.xmlDecode(c.v.text);\r\n                    break;\r\n\r\n                  case 'e':\r\n                    cell.value = { error: c.v.text };\r\n                    break;\r\n\r\n                  case 'b':\r\n                    cell.value = parseInt(c.v.text, 10) !== 0;\r\n                    break;\r\n\r\n                  default:\r\n                    if (utils.isDateFmt(cell.numFmt)) {\r\n                      cell.value = utils.excelToDate(parseFloat(c.v.text), properties.model.date1904);\r\n                    } else {\r\n                      cell.value = parseFloat(c.v.text);\r\n                    }\r\n                    break;\r\n                }\r\n              }\r\n              if (hyperlinks) {\r\n                const hyperlink = hyperlinks[c.ref];\r\n                if (hyperlink) {\r\n                  cell.text = cell.value;\r\n                  cell.value = undefined;\r\n                  cell.hyperlink = hyperlink;\r\n                }\r\n              }\r\n              c = null;\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      if (emitHyperlinks || hyperlinks) {\r\n        switch (name) {\r\n          case 'hyperlinks':\r\n            inHyperlinks = false;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    parser.on('error', error => {\r\n      this.emit('error', error);\r\n    });\r\n    parser.on('end', () => {\r\n      this.emit('finished');\r\n    });\r\n\r\n    // create a down-stream flow-control to regulate the stream\r\n    const flowControl = this.workbook.flowControl.createChild();\r\n    flowControl.pipe(\r\n      parser,\r\n      { sync: true }\r\n    );\r\n    entry.pipe(flowControl);\r\n  },\r\n});\r\n"],"file":"worksheet-reader.js"}